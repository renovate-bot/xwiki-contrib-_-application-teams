<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Teams.Code.WeeklyShifts" locale="">
  <web>Teams.Code</web>
  <name>WeeklyShifts</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Scheduler.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>WeeklyShifts</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content/>
  <object>
    <name>Teams.Code.WeeklyShifts</name>
    <number>0</number>
    <className>XWiki.SchedulerJobClass</className>
    <guid>83503525-e3d2-4fce-ae24-02ed6359c457</guid>
    <class>
      <name>XWiki.SchedulerJobClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <contextDatabase>
        <disabled>0</disabled>
        <name>contextDatabase</name>
        <number>9</number>
        <prettyName>Job execution context database</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextDatabase>
      <contextLang>
        <disabled>0</disabled>
        <name>contextLang</name>
        <number>8</number>
        <prettyName>Job execution context lang</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextLang>
      <contextUser>
        <disabled>0</disabled>
        <name>contextUser</name>
        <number>7</number>
        <prettyName>Job execution context user</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextUser>
      <cron>
        <disabled>0</disabled>
        <name>cron</name>
        <number>5</number>
        <prettyName>Cron Expression</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </cron>
      <jobClass>
        <disabled>0</disabled>
        <name>jobClass</name>
        <number>3</number>
        <prettyName>Job Class</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </jobClass>
      <jobDescription>
        <contenttype/>
        <disabled>0</disabled>
        <name>jobDescription</name>
        <number>2</number>
        <prettyName>Job Description</prettyName>
        <rows>10</rows>
        <size>45</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </jobDescription>
      <jobName>
        <disabled>0</disabled>
        <name>jobName</name>
        <number>1</number>
        <prettyName>Job Name</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </jobName>
      <script>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>script</name>
        <number>6</number>
        <prettyName>Job Script</prettyName>
        <rows>10</rows>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </script>
      <status>
        <disabled>0</disabled>
        <name>status</name>
        <number>4</number>
        <prettyName>Status</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </status>
    </class>
    <property>
      <contextDatabase>xwiki</contextDatabase>
    </property>
    <property>
      <contextLang>fr</contextLang>
    </property>
    <property>
      <contextUser>XWiki.ThomasMortagne</contextUser>
    </property>
    <property>
      <cron>0 0 6 ? * MON</cron>
    </property>
    <property>
      <jobClass>com.xpn.xwiki.plugin.scheduler.GroovyJob</jobClass>
    </property>
    <property>
      <jobDescription>Notify weekly based shifts and add them to the calendar for each team.</jobDescription>
    </property>
    <property>
      <jobName>Weekly Shifts</jobName>
    </property>
    <property>
      <script>    import java.time.*;
    import java.time.temporal.*;
    import java.time.format.*;
    import org.xwiki.model.reference.*;
    import java.text.*;

    def newEvent(userReference) {
      eventReference = new DocumentReference('WebHome', new SpaceReference(services.localization.render('teams.shift.scheduler.event.pageName', [currentweekMonday.format(formatter), currentweekFriday.format(formatter)]), calendarDocument.documentReference.parent))
      currentWeekEvent = xwiki.getDocument(eventReference)
      currentWeekEventXDocument = currentWeekEvent.doc

      currentWeekEvent.setTitle(services.localization.render('teams.shift.scheduler.event.title', [xwiki.getPlainUserName(userReference)]))
      currentWeekEventXDocument.setCreatorReference(userReference)
      currentWeekEventXDocument.setAuthorReference(userReference)
      currentWeekEventXDocument.setContentAuthorReference(userReference)

      // Remember event
      events.add(currentWeekEvent)

      if (currentWeekEvent.isNew()) {
        currentWeekEventObject = currentWeekEvent.newObject('MoccaCalendar.MoccaCalendarEventClass')
        currentWeekEventObject.set('startDate', Date.from(currentweekMonday.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant()))
        currentWeekEventObject.set('endDate', Date.from(currentweekFriday.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant()))
        currentWeekEventObject.set('allDay', 1)
        currentWeekEventObject.set('recurrent', 0)

        currentWeekEventXDocument.setParentReference(calendarDocument.documentReference)

        // Save event
        xwiki.getXWiki().saveDocument(currentWeekEventXDocument, context)
      } else if (currentWeekEventXDocument.isContentDirty()) {
        // Save event
        xwiki.getXWiki().saveDocument(currentWeekEventXDocument, context)
      }

      currentweekMonday = currentweekMonday.plusWeeks(1)
      currentweekFriday = currentweekMonday.with(DayOfWeek.FRIDAY);
    }

    // Search last week dates
    now = LocalDate.now()
    currentweekMonday = now.with(DayOfWeek.MONDAY);
    currentweekFriday = now.with(DayOfWeek.FRIDAY);
    lastweek = now.minusWeeks(1)
    lastweekMonday = lastweek.with(DayOfWeek.MONDAY);
    lastweekFriday = lastweek.with(DayOfWeek.FRIDAY);

    // Utils
    formatter = DateTimeFormatter.ofPattern('yyyyMMdd');
    dateFormat = new SimpleDateFormat('dd MMMM', services.localization.currentLocale);

    // Search teams
    teams = services.query.xwql("from doc.object(Teams.Code.TeamClass) as team").execute()
    for (team in teams) {
      // Get team document
      teamDocument = xwiki.getDocument(team)

      // Get member of the team who are part of the service list
      users = com.xpn.xwiki.objects.classes.UsersClass.getListFromString(teamDocument.getValue('shiftUsers'));

      // If there is any user registered, service handling is enabled
      if (!users.isEmpty()) {
        events = []

        calendar = teamDocument.getValue('shiftCalendar')
        if (calendar) {
          calendarDocument = xwiki.getDocument(calendar)
          eventReference = new DocumentReference('WebHome', new SpaceReference(services.localization.render('teams.shift.scheduler.event.pageName', [lastweekMonday.format(formatter), lastweekFriday.format(formatter)]), calendarDocument.documentReference.parent))
          lastWeekEvent = xwiki.getDocument(eventReference)

          currentUserIndex = 0
          if (!lastWeekEvent.isNew()) {
            // Current user is last week user plus 1 in the list
            currentUserIndex = users.indexOf(lastWeekEvent.creator)
            if (currentUserIndex != -1) {
              ++currentUserIndex
              if (currentUserIndex == users.size()) {
                currentUserIndex = 0
              }
            } else {
              currentUserIndex = 0
            }
          }

          // Create missing events

          for (int i = currentUserIndex; i &lt; users.size(); ++i) {
            user = users.get(i)
            newEvent(services.model.resolveDocument(user))
          }

          for (int i = 0; i &lt; currentUserIndex; ++i) {
            user = users.get(i)
            newEvent(services.model.resolveDocument(user))
          }
        }

        if (!events.isEmpty()) {
          teamMail = teamDocument.getValue('email')
          if (teamMail &amp;&amp; teamMail != '') {
            mailSubject = 'Permanence ' + dateFormat.format(events.get(0).getValue('startDate')) + ' -&gt; ' + dateFormat.format(events.get(0).getValue('endDate'))

            mailContent = services.localization.render('teams.shift.scheduler.mail.content', [xwiki.getPlainUserName(events.get(0).creatorReference)])
            mailContent += "\n\n"
            mailContent += events.get(0).description
            mailContent += "\n\n"

            for (int i = 1; i &lt; events.size() ; ++i) {
              if (i &gt; 1) {
                mailContent += "\n"
              }
              mailContent += '* ' + xwiki.getPlainUserName(events.get(i).creatorReference) + ' (' + dateFormat.format(events.get(i).getValue('startDate')) + ' -&gt; ' + dateFormat.format(events.get(i).getValue('endDate')) + ')'
            }

            mailContent += "\n\n"
            mailContent += services.localization.render('teams.shift.scheduler.mail.disclaimer', [teamDocument.externalURL])

            message = services.mailsender.createMessage(teamMail, teamMail, mailSubject)
            message.addPart('text/plain', mailContent)

            services.mailsender.send(message)
          }
        }
      }
    }</script>
    </property>
    <property>
      <status>Normal</status>
    </property>
  </object>
</xwikidoc>
